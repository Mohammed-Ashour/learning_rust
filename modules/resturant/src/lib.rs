/// The following commented code is autogenerated
// pub fn add(left: usize, right: usize) -> usize {
//     left + right
// }

// #[cfg(test)]
// mod tests {
//     use super::*;

//     #[test]
//     fn it_works() {
//         let result = add(2, 2);
//         assert_eq!(result, 4);
//     }
// }

/// Modules can contain other modules, structs,....
/// 
/// 
pub mod front_of_house; //here is the definition of the module written in a separate file in the same scoop
mod back_of_house {
    //adding struct to the module
    //to be able to access the struct we need to make is public
    //anything is private by default here, you need to set the access by yourself

    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit:String,
    }
    impl Breakfast {
        pub fn summer(toast:String) -> Breakfast{
            return Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
    //for enums, if the enum is pub, all the variants inside will be public as well

    pub enum Appetizer {
        Soup,
        Salad
    }
    fn fix_incorrect_order() {
        cook_order();
        //super here references the root mod, which here is the crate
        super::eat_at_resturant();
    }
    fn cook_order(){}
}

use back_of_house::{Appetizer, Breakfast};
// = crate::back_of_house::{Appetizer, Breakfast};
// = super::back_of_house::{Appetizer, Breakfast};
//also can import the module itself 
//use back_of_house::{self,Appetizer, Breakfast};
pub fn eat_at_resturant(){
    let mut meal:Breakfast = Breakfast::summer(String::from("roasted"));
    meal.toast = String::from("wheat");
    let apt: Appetizer = Appetizer::Salad;
    //You can't here adjust the seasonal fruit as it's not pub
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();
    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

